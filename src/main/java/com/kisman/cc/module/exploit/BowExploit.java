package com.kisman.cc.module.exploit;

import com.kisman.cc.Kisman;
import com.kisman.cc.event.events.PacketEvent;
import com.kisman.cc.module.Category;
import com.kisman.cc.module.Module;
import com.kisman.cc.settings.Setting;
import i.gishreloaded.gishcode.utils.visual.ChatUtils;
import me.zero.alpine.listener.EventHandler;
import me.zero.alpine.listener.Listener;
import net.minecraft.item.*;
import net.minecraft.network.play.client.CPacketEntityAction;
import net.minecraft.network.play.client.CPacketPlayer;
import net.minecraft.network.play.client.CPacketPlayerDigging;
import net.minecraft.network.play.client.CPacketPlayerTryUseItem;
import net.minecraft.util.EnumHand;
import net.minecraft.util.text.TextFormatting;

public class BowExploit extends Module {
    private Setting bows = new Setting("Bows", this, true);

    private Setting eggs = new Setting("Eggs", this, true);
    private Setting pearls = new Setting("Pearls", this, true);
    private Setting snowballs = new Setting("SnowBalls", this, true);
    private Setting timeOut = new Setting("TimeOut", this, 5000, 100, 20000, true);
    private Setting spoofs = new Setting("Spoofs", this, 10, 1, 300, true);
    private Setting bypass = new Setting("Bypass", this, false);
    private Setting debug = new Setting("Debug", this, false);

    private boolean shooting = false;
    private long lastShootTime;

    public BowExploit() {
        super("BowExploit", "BowExploit", Category.EXPLOIT);
        super.setDisplayInfo("[" + spoofs.getValDouble() + TextFormatting.GRAY + "]");

        setmgr.rSetting(bows);
        setmgr.rSetting(eggs);
        setmgr.rSetting(pearls);
        setmgr.rSetting(snowballs);
        setmgr.rSetting(timeOut);
        setmgr.rSetting(spoofs);
        setmgr.rSetting(bypass);
        setmgr.rSetting(debug);
    }

    public void onEnable() {
        Kisman.EVENT_BUS.subscribe(listener);
    }

    public void onDisable() {
        Kisman.EVENT_BUS.unsubscribe(listener);
    }

    @EventHandler
    private final Listener<PacketEvent.Send> listener = new Listener<>(event -> {
        if (event.getPacket() instanceof CPacketPlayerDigging) {
            CPacketPlayerDigging packet = (CPacketPlayerDigging) event.getPacket();

            if (packet.getAction() == CPacketPlayerDigging.Action.RELEASE_USE_ITEM) {
                ItemStack handStack = mc.player.getHeldItem(EnumHand.MAIN_HAND);

                if (!handStack.isEmpty() && handStack.getItem() != null && handStack.getItem() instanceof ItemBow && bows.getValBoolean()) {
                    doSpoofs();
                    if (debug.getValBoolean() && !shooting) ChatUtils.error("Trying to spoof");
                }
            }

        } else if (event.getPacket() instanceof CPacketPlayerTryUseItem) {
            CPacketPlayerTryUseItem packet2 = (CPacketPlayerTryUseItem) event.getPacket();

            if (packet2.getHand() == EnumHand.MAIN_HAND) {
                ItemStack handStack = mc.player.getHeldItem(EnumHand.MAIN_HAND);

                if (!handStack.isEmpty() && handStack.getItem() != null) {
                    if (handStack.getItem() instanceof ItemEgg && eggs.getValBoolean()) {
                        doSpoofs();
                    } else if (handStack.getItem() instanceof ItemEnderPearl && pearls.getValBoolean()) {
                        doSpoofs();
                    } else if (handStack.getItem() instanceof ItemSnowball && snowballs.getValBoolean()) {
                        doSpoofs();
                    }
                }
            }
        }
    });

    private void doSpoofs() {
        if (System.currentTimeMillis() - lastShootTime >= timeOut.getValDouble()) {
            shooting = false;
            lastShootTime = System.currentTimeMillis();

            mc.player.connection.sendPacket(new CPacketEntityAction(mc.player, CPacketEntityAction.Action.START_SPRINTING));

            for (int index = 0; index < spoofs.getValDouble(); ++index) {
                if (bypass.getValBoolean()) {
                    mc.player.connection.sendPacket(new CPacketPlayer.Position(mc.player.posX, mc.player.posY + 1e-10, mc.player.posZ, false));
                    mc.player.connection.sendPacket(new CPacketPlayer.Position(mc.player.posX, mc.player.posY - 1e-10, mc.player.posZ, true));
                } else {
                    mc.player.connection.sendPacket(new CPacketPlayer.Position(mc.player.posX, mc.player.posY - 1e-10, mc.player.posZ, true));
                    mc.player.connection.sendPacket(new CPacketPlayer.Position(mc.player.posX, mc.player.posY + 1e-10, mc.player.posZ, false));
                }

            }

            if (debug.getValBoolean()) ChatUtils.complete("Spoofed");
            shooting = true;
        }
    }
}
